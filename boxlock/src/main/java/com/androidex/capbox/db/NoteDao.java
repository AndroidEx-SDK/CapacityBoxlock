package com.androidex.capbox.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Address = new Property(1, String.class, "address", false, "ADDRESS");
        public final static Property Time = new Property(2, Long.class, "time", false, "TIME");
        public final static Property Lat = new Property(3, String.class, "lat", false, "LAT");
        public final static Property Lon = new Property(4, String.class, "lon", false, "LON");
        public final static Property Alt = new Property(5, String.class, "alt", false, "ALT");
        public final static Property Isshow = new Property(6, int.class, "isshow", false, "ISSHOW");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
    }

    private final NoteTypeConverter typeConverter = new NoteTypeConverter();

    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ADDRESS\" TEXT NOT NULL ," + // 1: address
                "\"TIME\" INTEGER NOT NULL ," + // 2: time
                "\"LAT\" TEXT NOT NULL ," + // 3: lat
                "\"LON\" TEXT NOT NULL ," + // 4: lon
                "\"ALT\" TEXT," + // 5: alt
                "\"ISSHOW\" INTEGER NOT NULL ," + // 6: isshow
                "\"TYPE\" TEXT);"); // 7: type
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_NOTE_TIME_DESC ON \"NOTE\"" +
                " (\"TIME\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAddress());
        stmt.bindLong(3, entity.getTime());
        stmt.bindString(4, entity.getLat());
        stmt.bindString(5, entity.getLon());
 
        String alt = entity.getAlt();
        if (alt != null) {
            stmt.bindString(6, alt);
        }
        stmt.bindLong(7, entity.getIsshow());
 
        NoteType type = entity.getType();
        if (type != null) {
            stmt.bindString(8, typeConverter.convertToDatabaseValue(type));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAddress());
        stmt.bindLong(3, entity.getTime());
        stmt.bindString(4, entity.getLat());
        stmt.bindString(5, entity.getLon());
 
        String alt = entity.getAlt();
        if (alt != null) {
            stmt.bindString(6, alt);
        }
        stmt.bindLong(7, entity.getIsshow());
 
        NoteType type = entity.getType();
        if (type != null) {
            stmt.bindString(8, typeConverter.convertToDatabaseValue(type));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // address
            cursor.getLong(offset + 2), // time
            cursor.getString(offset + 3), // lat
            cursor.getString(offset + 4), // lon
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // alt
            cursor.getInt(offset + 6), // isshow
            cursor.isNull(offset + 7) ? null : typeConverter.convertToEntityProperty(cursor.getString(offset + 7)) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAddress(cursor.getString(offset + 1));
        entity.setTime(cursor.getLong(offset + 2));
        entity.setLat(cursor.getString(offset + 3));
        entity.setLon(cursor.getString(offset + 4));
        entity.setAlt(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsshow(cursor.getInt(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : typeConverter.convertToEntityProperty(cursor.getString(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Note entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
