package com.androidex.capbox.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_RECORD".
*/
public class ChatRecordDao extends AbstractDao<ChatRecord, Long> {

    public static final String TABLENAME = "CHAT_RECORD";

    /**
     * Properties of entity ChatRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NickName = new Property(1, String.class, "nickName", false, "NICK_NAME");
        public final static Property Uuid = new Property(2, String.class, "uuid", false, "UUID");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property Time = new Property(4, Long.class, "time", false, "TIME");
        public final static Property MsgType = new Property(5, byte.class, "msgType", false, "MSG_TYPE");
        public final static Property MsgContent = new Property(6, String.class, "msgContent", false, "MSG_CONTENT");
        public final static Property IsRead = new Property(7, String.class, "isRead", false, "IS_READ");
        public final static Property IsSend = new Property(8, String.class, "isSend", false, "IS_SEND");
        public final static Property DeleteChat = new Property(9, String.class, "deleteChat", false, "DELETE_CHAT");
    }


    public ChatRecordDao(DaoConfig config) {
        super(config);
    }
    
    public ChatRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NICK_NAME\" TEXT NOT NULL ," + // 1: nickName
                "\"UUID\" TEXT," + // 2: uuid
                "\"ADDRESS\" TEXT NOT NULL ," + // 3: address
                "\"TIME\" INTEGER NOT NULL ," + // 4: time
                "\"MSG_TYPE\" INTEGER NOT NULL ," + // 5: msgType
                "\"MSG_CONTENT\" TEXT NOT NULL ," + // 6: msgContent
                "\"IS_READ\" TEXT NOT NULL ," + // 7: isRead
                "\"IS_SEND\" TEXT NOT NULL ," + // 8: isSend
                "\"DELETE_CHAT\" TEXT NOT NULL );"); // 9: deleteChat
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CHAT_RECORD_ADDRESS_UUID_TIME_DESC ON \"CHAT_RECORD\"" +
                " (\"ADDRESS\" ASC,\"UUID\" ASC,\"TIME\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNickName());
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(3, uuid);
        }
        stmt.bindString(4, entity.getAddress());
        stmt.bindLong(5, entity.getTime());
        stmt.bindLong(6, entity.getMsgType());
        stmt.bindString(7, entity.getMsgContent());
        stmt.bindString(8, entity.getIsRead());
        stmt.bindString(9, entity.getIsSend());
        stmt.bindString(10, entity.getDeleteChat());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNickName());
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(3, uuid);
        }
        stmt.bindString(4, entity.getAddress());
        stmt.bindLong(5, entity.getTime());
        stmt.bindLong(6, entity.getMsgType());
        stmt.bindString(7, entity.getMsgContent());
        stmt.bindString(8, entity.getIsRead());
        stmt.bindString(9, entity.getIsSend());
        stmt.bindString(10, entity.getDeleteChat());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatRecord readEntity(Cursor cursor, int offset) {
        ChatRecord entity = new ChatRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // nickName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uuid
            cursor.getString(offset + 3), // address
            cursor.getLong(offset + 4), // time
            (byte) cursor.getShort(offset + 5), // msgType
            cursor.getString(offset + 6), // msgContent
            cursor.getString(offset + 7), // isRead
            cursor.getString(offset + 8), // isSend
            cursor.getString(offset + 9) // deleteChat
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickName(cursor.getString(offset + 1));
        entity.setUuid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.getString(offset + 3));
        entity.setTime(cursor.getLong(offset + 4));
        entity.setMsgType((byte) cursor.getShort(offset + 5));
        entity.setMsgContent(cursor.getString(offset + 6));
        entity.setIsRead(cursor.getString(offset + 7));
        entity.setIsSend(cursor.getString(offset + 8));
        entity.setDeleteChat(cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
